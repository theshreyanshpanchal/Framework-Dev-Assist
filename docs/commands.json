[
    {
        "name": "php artisan help",
        "description": "Display help for a command",
        "options": []
    },
    {
        "name": "php artisan list",
        "description": "List commands",
        "options": []
    },
    {
        "name": "php artisan test",
        "description": "Run the application tests",
        "options": [
            {
                "shortcut": "-p",
                "description": "Indicates if the tests should run in parallel"
            }
        ]
    },
    {
        "name": "php artisan tinker",
        "description": "Interact with your application",
        "options": []
    },
    {
        "name": "php artisan inspire",
        "description": "Display an inspiring quote",
        "options": []
    },
    {
        "name": "php artisan about",
        "description": "Display basic information about your application",
        "options": []
    },
    {
        "name": "php artisan cache:clear",
        "description": "Flush the application cache",
        "options": []
    },
    {
        "name": "php artisan cache:forget",
        "description": "Remove an item from the cache",
        "options": []
    },
    {
        "name": "php artisan clear-compiled",
        "description": "Remove the compiled class file",
        "options": []
    },
    {
        "name": "php artisan auth:clear-resets",
        "description": "Flush expired password reset tokens",
        "options": []
    },
    {
        "name": "php artisan config:cache",
        "description": "Create a cache file for faster configuration loading",
        "options": []
    },
    {
        "name": "php artisan config:clear",
        "description": "Remove the configuration cache file",
        "options": []
    },
    {
        "name": "php artisan config:show",
        "description": "Display all of the values for a given configuration file or key",
        "options": []
    },
    {
        "name": "php artisan db",
        "description": "Start a new database CLI session",
        "options": []
    },
    {
        "name": "php artisan db:monitor",
        "description": "Monitor the number of connections on the specified database",
        "options": []
    },
    {
        "name": "php artisan model:prune",
        "description": "Prune models that are no longer needed",
        "options": []
    },
    {
        "name": "php artisan db:show",
        "description": "Display information about the given database",
        "options": []
    },
    {
        "name": "php artisan db:table",
        "description": "Display information about the given database table",
        "options": []
    },
    {
        "name": "php artisan db:wipe",
        "description": "Drop all tables, views, and types",
        "options": []
    },
    {
        "name": "php artisan down",
        "description": "Put the application into maintenance \/ demo mode",
        "options": []
    },
    {
        "name": "php artisan env",
        "description": "Display the current framework environment",
        "options": []
    },
    {
        "name": "php artisan env:decrypt",
        "description": "Decrypt an environment file",
        "options": []
    },
    {
        "name": "php artisan env:encrypt",
        "description": "Encrypt an environment file",
        "options": []
    },
    {
        "name": "php artisan event:cache",
        "description": "Discover and cache the application's events and listeners",
        "options": []
    },
    {
        "name": "php artisan event:clear",
        "description": "Clear all cached events and listeners",
        "options": []
    },
    {
        "name": "php artisan event:list",
        "description": "List the application's events and listeners",
        "options": []
    },
    {
        "name": "php artisan key:generate",
        "description": "Set the application key",
        "options": []
    },
    {
        "name": "php artisan optimize",
        "description": "Cache framework bootstrap, configuration, and metadata to increase performance",
        "options": []
    },
    {
        "name": "php artisan optimize:clear",
        "description": "Remove the cached bootstrap files",
        "options": []
    },
    {
        "name": "php artisan package:discover",
        "description": "Rebuild the cached package manifest",
        "options": []
    },
    {
        "name": "php artisan cache:prune-stale-tags",
        "description": "Prune stale cache tags from the cache (Redis only)",
        "options": []
    },
    {
        "name": "php artisan queue:clear",
        "description": "Delete all of the jobs from the specified queue",
        "options": []
    },
    {
        "name": "php artisan queue:failed",
        "description": "List all of the failed queue jobs",
        "options": []
    },
    {
        "name": "php artisan queue:flush",
        "description": "Flush all of the failed queue jobs",
        "options": []
    },
    {
        "name": "php artisan queue:forget",
        "description": "Delete a failed queue job",
        "options": []
    },
    {
        "name": "php artisan queue:listen",
        "description": "Listen to a given queue",
        "options": []
    },
    {
        "name": "php artisan queue:monitor",
        "description": "Monitor the size of the specified queues",
        "options": []
    },
    {
        "name": "php artisan queue:prune-batches",
        "description": "Prune stale entries from the batches database",
        "options": []
    },
    {
        "name": "php artisan queue:prune-failed",
        "description": "Prune stale entries from the failed jobs table",
        "options": []
    },
    {
        "name": "php artisan queue:restart",
        "description": "Restart queue worker daemons after their current job",
        "options": []
    },
    {
        "name": "php artisan queue:retry",
        "description": "Retry a failed queue job",
        "options": []
    },
    {
        "name": "php artisan queue:retry-batch",
        "description": "Retry the failed jobs for a batch",
        "options": []
    },
    {
        "name": "php artisan queue:work",
        "description": "Start processing jobs on the queue as a daemon",
        "options": []
    },
    {
        "name": "php artisan route:cache",
        "description": "Create a route cache file for faster route registration",
        "options": []
    },
    {
        "name": "php artisan route:clear",
        "description": "Remove the route cache file",
        "options": []
    },
    {
        "name": "php artisan route:list",
        "description": "List all registered routes",
        "options": [
            {
                "shortcut": "-r",
                "description": "Reverse the ordering of the routes"
            }
        ]
    },
    {
        "name": "php artisan schema:dump",
        "description": "Dump the given database schema",
        "options": []
    },
    {
        "name": "php artisan db:seed",
        "description": "Seed the database with records",
        "options": []
    },
    {
        "name": "php artisan schedule:finish",
        "description": "Handle the completion of a scheduled command",
        "options": []
    },
    {
        "name": "php artisan schedule:list",
        "description": "List all scheduled tasks",
        "options": []
    },
    {
        "name": "php artisan schedule:run",
        "description": "Run the scheduled commands",
        "options": []
    },
    {
        "name": "php artisan schedule:clear-cache",
        "description": "Delete the cached mutex files created by scheduler",
        "options": []
    },
    {
        "name": "php artisan schedule:test",
        "description": "Run a scheduled command",
        "options": []
    },
    {
        "name": "php artisan schedule:work",
        "description": "Start the schedule worker",
        "options": []
    },
    {
        "name": "php artisan schedule:interrupt",
        "description": "Interrupt the current schedule run",
        "options": []
    },
    {
        "name": "php artisan model:show",
        "description": "Show information about an Eloquent model",
        "options": []
    },
    {
        "name": "php artisan storage:link",
        "description": "Create the symbolic links configured for the application",
        "options": []
    },
    {
        "name": "php artisan storage:unlink",
        "description": "Delete existing symbolic links configured for the application",
        "options": []
    },
    {
        "name": "php artisan up",
        "description": "Bring the application out of maintenance mode",
        "options": []
    },
    {
        "name": "php artisan view:cache",
        "description": "Compile all of the application's Blade templates",
        "options": []
    },
    {
        "name": "php artisan view:clear",
        "description": "Clear all compiled view files",
        "options": []
    },
    {
        "name": "php artisan install:api",
        "description": "Create an API routes file and install Laravel Sanctum or Laravel Passport",
        "options": []
    },
    {
        "name": "php artisan install:broadcasting",
        "description": "Create a broadcasting channel routes file",
        "options": []
    },
    {
        "name": "php artisan make:cache-table",
        "description": "Create a migration for the cache database table",
        "options": []
    },
    {
        "name": "php artisan make:cache-table",
        "description": "Create a migration for the cache database table",
        "options": []
    },
    {
        "name": "php artisan make:cast",
        "description": "Create a new custom Eloquent cast class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the cast already exists"
            }
        ]
    },
    {
        "name": "php artisan channel:list",
        "description": "List all registered private broadcast channels",
        "options": []
    },
    {
        "name": "php artisan make:channel",
        "description": "Create a new channel class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the channel already exists"
            }
        ]
    },
    {
        "name": "php artisan make:class",
        "description": "Create a new class",
        "options": [
            {
                "shortcut": "-i",
                "description": "Generate a single method, invokable class"
            },
            {
                "shortcut": "-f",
                "description": "Create the class even if the class already exists"
            }
        ]
    },
    {
        "name": "php artisan make:component",
        "description": "Create a new view component class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the component already exists"
            }
        ]
    },
    {
        "name": "php artisan config:publish",
        "description": "Publish configuration files to your application",
        "options": []
    },
    {
        "name": "php artisan make:command",
        "description": "Create a new Artisan command",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the console command already exists"
            }
        ]
    },
    {
        "name": "php artisan make:controller",
        "description": "Create a new controller class",
        "options": [
            {
                "shortcut": "-i",
                "description": "Generate a single method, invokable controller class"
            },
            {
                "shortcut": "-m",
                "description": "Generate a resource controller for the given model"
            },
            {
                "shortcut": "-p",
                "description": "Generate a nested resource controller class"
            },
            {
                "shortcut": "-r",
                "description": "Generate a resource controller class"
            },
            {
                "shortcut": "-R",
                "description": "Generate FormRequest classes for store and update"
            },
            {
                "shortcut": "-s",
                "description": "Generate a singleton resource controller class"
            }
        ]
    },
    {
        "name": "php artisan docs",
        "description": "Access the Laravel documentation",
        "options": []
    },
    {
        "name": "php artisan make:enum",
        "description": "Create a new enum",
        "options": [
            {
                "shortcut": "-s",
                "description": "Generate a string backed enum."
            },
            {
                "shortcut": "-i",
                "description": "Generate an integer backed enum."
            },
            {
                "shortcut": "-f",
                "description": "Create the enum even if the enum already exists"
            }
        ]
    },
    {
        "name": "php artisan event:generate",
        "description": "Generate the missing events and listeners based on registration",
        "options": []
    },
    {
        "name": "php artisan make:event",
        "description": "Create a new event class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the event already exists"
            }
        ]
    },
    {
        "name": "php artisan make:exception",
        "description": "Create a new custom exception class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the exception already exists"
            }
        ]
    },
    {
        "name": "php artisan make:factory",
        "description": "Create a new model factory",
        "options": [
            {
                "shortcut": "-m",
                "description": "The name of the model"
            }
        ]
    },
    {
        "name": "php artisan make:interface",
        "description": "Create a new interface",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the interface even if the interface already exists"
            }
        ]
    },
    {
        "name": "php artisan make:job",
        "description": "Create a new job class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the job already exists"
            }
        ]
    },
    {
        "name": "php artisan lang:publish",
        "description": "Publish all language files that are available for customization",
        "options": []
    },
    {
        "name": "php artisan make:listener",
        "description": "Create a new event listener class",
        "options": [
            {
                "shortcut": "-e",
                "description": "The event class being listened for"
            },
            {
                "shortcut": "-f",
                "description": "Create the class even if the listener already exists"
            }
        ]
    },
    {
        "name": "php artisan make:mail",
        "description": "Create a new email class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the mailable already exists"
            },
            {
                "shortcut": "-m",
                "description": "Create a new Markdown template for the mailable"
            }
        ]
    },
    {
        "name": "php artisan make:middleware",
        "description": "Create a new middleware class",
        "options": []
    },
    {
        "name": "php artisan make:model",
        "description": "Create a new Eloquent model class",
        "options": [
            {
                "shortcut": "-a",
                "description": "Generate a migration, seeder, factory, policy, resource controller, and form request classes for the model"
            },
            {
                "shortcut": "-c",
                "description": "Create a new controller for the model"
            },
            {
                "shortcut": "-f",
                "description": "Create a new factory for the model"
            },
            {
                "shortcut": "-m",
                "description": "Create a new migration file for the model"
            },
            {
                "shortcut": "-s",
                "description": "Create a new seeder for the model"
            },
            {
                "shortcut": "-p",
                "description": "Indicates if the generated model should be a custom intermediate table model"
            },
            {
                "shortcut": "-r",
                "description": "Indicates if the generated controller should be a resource controller"
            },
            {
                "shortcut": "-R",
                "description": "Create new form request classes and use them in the resource controller"
            }
        ]
    },
    {
        "name": "php artisan make:notification",
        "description": "Create a new notification class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the notification already exists"
            },
            {
                "shortcut": "-m",
                "description": "Create a new Markdown template for the notification"
            }
        ]
    },
    {
        "name": "php artisan make:notifications-table",
        "description": "Create a migration for the notifications table",
        "options": []
    },
    {
        "name": "php artisan make:notifications-table",
        "description": "Create a migration for the notifications table",
        "options": []
    },
    {
        "name": "php artisan make:observer",
        "description": "Create a new observer class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the observer already exists"
            },
            {
                "shortcut": "-m",
                "description": "The model that the observer applies to"
            }
        ]
    },
    {
        "name": "php artisan make:policy",
        "description": "Create a new policy class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the policy already exists"
            },
            {
                "shortcut": "-m",
                "description": "The model that the policy applies to"
            },
            {
                "shortcut": "-g",
                "description": "The guard that the policy relies on"
            }
        ]
    },
    {
        "name": "php artisan make:provider",
        "description": "Create a new service provider class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the provider already exists"
            }
        ]
    },
    {
        "name": "php artisan make:queue-failed-table",
        "description": "Create a migration for the failed queue jobs database table",
        "options": []
    },
    {
        "name": "php artisan make:queue-failed-table",
        "description": "Create a migration for the failed queue jobs database table",
        "options": []
    },
    {
        "name": "php artisan make:queue-table",
        "description": "Create a migration for the queue jobs database table",
        "options": []
    },
    {
        "name": "php artisan make:queue-table",
        "description": "Create a migration for the queue jobs database table",
        "options": []
    },
    {
        "name": "php artisan make:queue-batches-table",
        "description": "Create a migration for the batches database table",
        "options": []
    },
    {
        "name": "php artisan make:queue-batches-table",
        "description": "Create a migration for the batches database table",
        "options": []
    },
    {
        "name": "php artisan make:request",
        "description": "Create a new form request class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the request already exists"
            }
        ]
    },
    {
        "name": "php artisan make:resource",
        "description": "Create a new resource",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the resource already exists"
            },
            {
                "shortcut": "-c",
                "description": "Create a resource collection"
            }
        ]
    },
    {
        "name": "php artisan make:rule",
        "description": "Create a new validation rule",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the rule already exists"
            },
            {
                "shortcut": "-i",
                "description": "Generate an implicit rule"
            }
        ]
    },
    {
        "name": "php artisan make:scope",
        "description": "Create a new scope class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the class even if the scope already exists"
            }
        ]
    },
    {
        "name": "php artisan make:seeder",
        "description": "Create a new seeder class",
        "options": []
    },
    {
        "name": "php artisan make:session-table",
        "description": "Create a migration for the session database table",
        "options": []
    },
    {
        "name": "php artisan make:session-table",
        "description": "Create a migration for the session database table",
        "options": []
    },
    {
        "name": "php artisan serve",
        "description": "Serve the application on the PHP development server",
        "options": []
    },
    {
        "name": "php artisan stub:publish",
        "description": "Publish all stubs that are available for customization",
        "options": []
    },
    {
        "name": "php artisan make:test",
        "description": "Create a new test class",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the test even if the test already exists"
            },
            {
                "shortcut": "-u",
                "description": "Create a unit test"
            }
        ]
    },
    {
        "name": "php artisan make:trait",
        "description": "Create a new trait",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the trait even if the trait already exists"
            }
        ]
    },
    {
        "name": "php artisan vendor:publish",
        "description": "Publish any publishable assets from vendor packages",
        "options": []
    },
    {
        "name": "php artisan make:view",
        "description": "Create a new view",
        "options": [
            {
                "shortcut": "-f",
                "description": "Create the view even if the view already exists"
            }
        ]
    },
    {
        "name": "php artisan migrate",
        "description": "Run the database migrations",
        "options": []
    },
    {
        "name": "php artisan migrate:fresh",
        "description": "Drop all tables and re-run all migrations",
        "options": []
    },
    {
        "name": "php artisan migrate:install",
        "description": "Create the migration repository",
        "options": []
    },
    {
        "name": "php artisan migrate:refresh",
        "description": "Reset and re-run all migrations",
        "options": []
    },
    {
        "name": "php artisan migrate:reset",
        "description": "Rollback all database migrations",
        "options": []
    },
    {
        "name": "php artisan migrate:rollback",
        "description": "Rollback the last database migration",
        "options": []
    },
    {
        "name": "php artisan migrate:status",
        "description": "Show the status of each migration",
        "options": []
    },
    {
        "name": "php artisan make:migration",
        "description": "Create a new migration file",
        "options": []
    }
]